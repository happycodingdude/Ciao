// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyDockerWebAPI.Repository;

#nullable disable

namespace MyDockerWebAPI.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyDockerWebAPI.Repository.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasColumnType("longtext");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasColumnType("longtext");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("create_time")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("modify_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Author 1",
                            CategoryId = 1,
                            Language = "Language 1",
                            Pages = 200,
                            PublisherId = 1,
                            Title = "Title 1",
                            create_time = new DateTime(2023, 5, 9, 15, 36, 0, 131, DateTimeKind.Local).AddTicks(3653),
                            modify_time = new DateTime(2023, 5, 9, 15, 36, 0, 131, DateTimeKind.Local).AddTicks(4294)
                        },
                        new
                        {
                            Id = 2,
                            Author = "Author 2",
                            CategoryId = 1,
                            Language = "Language 2",
                            Pages = 300,
                            PublisherId = 1,
                            Title = "Title 2",
                            create_time = new DateTime(2023, 5, 9, 15, 36, 0, 131, DateTimeKind.Local).AddTicks(4909),
                            modify_time = new DateTime(2023, 5, 9, 15, 36, 0, 131, DateTimeKind.Local).AddTicks(4918)
                        },
                        new
                        {
                            Id = 3,
                            Author = "Author 3",
                            CategoryId = 1,
                            Language = "Language 3",
                            Pages = 400,
                            PublisherId = 1,
                            Title = "Title 3",
                            create_time = new DateTime(2023, 5, 9, 15, 36, 0, 131, DateTimeKind.Local).AddTicks(4933),
                            modify_time = new DateTime(2023, 5, 9, 15, 36, 0, 131, DateTimeKind.Local).AddTicks(4936)
                        });
                });

            modelBuilder.Entity("MyDockerWebAPI.Repository.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("create_time")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("modify_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Category 1",
                            create_time = new DateTime(2023, 5, 9, 15, 36, 0, 120, DateTimeKind.Local).AddTicks(6253),
                            modify_time = new DateTime(2023, 5, 9, 15, 36, 0, 120, DateTimeKind.Local).AddTicks(6838)
                        });
                });

            modelBuilder.Entity("MyDockerWebAPI.Repository.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("create_time")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("modify_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Publisher 1",
                            create_time = new DateTime(2023, 5, 9, 15, 36, 0, 114, DateTimeKind.Local).AddTicks(2069),
                            modify_time = new DateTime(2023, 5, 9, 15, 36, 0, 115, DateTimeKind.Local).AddTicks(8485)
                        });
                });

            modelBuilder.Entity("MyDockerWebAPI.Repository.Book", b =>
                {
                    b.HasOne("MyDockerWebAPI.Repository.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyDockerWebAPI.Repository.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("MyDockerWebAPI.Repository.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MyDockerWebAPI.Repository.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
